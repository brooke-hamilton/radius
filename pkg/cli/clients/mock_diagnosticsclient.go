// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/clients (interfaces: DiagnosticsClient)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_diagnosticsclient.go -package=clients -self_package github.com/radius-project/radius/pkg/cli/clients github.com/radius-project/radius/pkg/cli/clients DiagnosticsClient
//

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDiagnosticsClient is a mock of DiagnosticsClient interface.
type MockDiagnosticsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiagnosticsClientMockRecorder
	isgomock struct{}
}

// MockDiagnosticsClientMockRecorder is the mock recorder for MockDiagnosticsClient.
type MockDiagnosticsClientMockRecorder struct {
	mock *MockDiagnosticsClient
}

// NewMockDiagnosticsClient creates a new mock instance.
func NewMockDiagnosticsClient(ctrl *gomock.Controller) *MockDiagnosticsClient {
	mock := &MockDiagnosticsClient{ctrl: ctrl}
	mock.recorder = &MockDiagnosticsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiagnosticsClient) EXPECT() *MockDiagnosticsClientMockRecorder {
	return m.recorder
}

// Expose mocks base method.
func (m *MockDiagnosticsClient) Expose(ctx context.Context, options ExposeOptions) (chan error, chan struct{}, chan os.Signal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expose", ctx, options)
	ret0, _ := ret[0].(chan error)
	ret1, _ := ret[1].(chan struct{})
	ret2, _ := ret[2].(chan os.Signal)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Expose indicates an expected call of Expose.
func (mr *MockDiagnosticsClientMockRecorder) Expose(ctx, options any) *MockDiagnosticsClientExposeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expose", reflect.TypeOf((*MockDiagnosticsClient)(nil).Expose), ctx, options)
	return &MockDiagnosticsClientExposeCall{Call: call}
}

// MockDiagnosticsClientExposeCall wrap *gomock.Call
type MockDiagnosticsClientExposeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiagnosticsClientExposeCall) Return(failed chan error, stop chan struct{}, signals chan os.Signal, err error) *MockDiagnosticsClientExposeCall {
	c.Call = c.Call.Return(failed, stop, signals, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiagnosticsClientExposeCall) Do(f func(context.Context, ExposeOptions) (chan error, chan struct{}, chan os.Signal, error)) *MockDiagnosticsClientExposeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiagnosticsClientExposeCall) DoAndReturn(f func(context.Context, ExposeOptions) (chan error, chan struct{}, chan os.Signal, error)) *MockDiagnosticsClientExposeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPublicEndpoint mocks base method.
func (m *MockDiagnosticsClient) GetPublicEndpoint(ctx context.Context, options EndpointOptions) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicEndpoint", ctx, options)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicEndpoint indicates an expected call of GetPublicEndpoint.
func (mr *MockDiagnosticsClientMockRecorder) GetPublicEndpoint(ctx, options any) *MockDiagnosticsClientGetPublicEndpointCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicEndpoint", reflect.TypeOf((*MockDiagnosticsClient)(nil).GetPublicEndpoint), ctx, options)
	return &MockDiagnosticsClientGetPublicEndpointCall{Call: call}
}

// MockDiagnosticsClientGetPublicEndpointCall wrap *gomock.Call
type MockDiagnosticsClientGetPublicEndpointCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiagnosticsClientGetPublicEndpointCall) Return(arg0 *string, arg1 error) *MockDiagnosticsClientGetPublicEndpointCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiagnosticsClientGetPublicEndpointCall) Do(f func(context.Context, EndpointOptions) (*string, error)) *MockDiagnosticsClientGetPublicEndpointCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiagnosticsClientGetPublicEndpointCall) DoAndReturn(f func(context.Context, EndpointOptions) (*string, error)) *MockDiagnosticsClientGetPublicEndpointCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Logs mocks base method.
func (m *MockDiagnosticsClient) Logs(ctx context.Context, options LogsOptions) ([]LogStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", ctx, options)
	ret0, _ := ret[0].([]LogStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs.
func (mr *MockDiagnosticsClientMockRecorder) Logs(ctx, options any) *MockDiagnosticsClientLogsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockDiagnosticsClient)(nil).Logs), ctx, options)
	return &MockDiagnosticsClientLogsCall{Call: call}
}

// MockDiagnosticsClientLogsCall wrap *gomock.Call
type MockDiagnosticsClientLogsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiagnosticsClientLogsCall) Return(arg0 []LogStream, arg1 error) *MockDiagnosticsClientLogsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiagnosticsClientLogsCall) Do(f func(context.Context, LogsOptions) ([]LogStream, error)) *MockDiagnosticsClientLogsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiagnosticsClientLogsCall) DoAndReturn(f func(context.Context, LogsOptions) ([]LogStream, error)) *MockDiagnosticsClientLogsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
