// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/prompt (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_prompter.go -package=prompt -self_package github.com/radius-project/radius/pkg/cli/prompt github.com/radius-project/radius/pkg/cli/prompt Interface
//

// Package prompt is a generated GoMock package.
package prompt

import (
	reflect "reflect"

	tea "github.com/charmbracelet/bubbletea"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GetListInput mocks base method.
func (m *MockInterface) GetListInput(items []string, promptMsg string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListInput", items, promptMsg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListInput indicates an expected call of GetListInput.
func (mr *MockInterfaceMockRecorder) GetListInput(items, promptMsg any) *MockInterfaceGetListInputCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListInput", reflect.TypeOf((*MockInterface)(nil).GetListInput), items, promptMsg)
	return &MockInterfaceGetListInputCall{Call: call}
}

// MockInterfaceGetListInputCall wrap *gomock.Call
type MockInterfaceGetListInputCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceGetListInputCall) Return(arg0 string, arg1 error) *MockInterfaceGetListInputCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceGetListInputCall) Do(f func([]string, string) (string, error)) *MockInterfaceGetListInputCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceGetListInputCall) DoAndReturn(f func([]string, string) (string, error)) *MockInterfaceGetListInputCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTextInput mocks base method.
func (m *MockInterface) GetTextInput(prompt string, options TextInputOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextInput", prompt, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextInput indicates an expected call of GetTextInput.
func (mr *MockInterfaceMockRecorder) GetTextInput(prompt, options any) *MockInterfaceGetTextInputCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextInput", reflect.TypeOf((*MockInterface)(nil).GetTextInput), prompt, options)
	return &MockInterfaceGetTextInputCall{Call: call}
}

// MockInterfaceGetTextInputCall wrap *gomock.Call
type MockInterfaceGetTextInputCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceGetTextInputCall) Return(arg0 string, arg1 error) *MockInterfaceGetTextInputCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceGetTextInputCall) Do(f func(string, TextInputOptions) (string, error)) *MockInterfaceGetTextInputCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceGetTextInputCall) DoAndReturn(f func(string, TextInputOptions) (string, error)) *MockInterfaceGetTextInputCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunProgram mocks base method.
func (m *MockInterface) RunProgram(program *tea.Program) (tea.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunProgram", program)
	ret0, _ := ret[0].(tea.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunProgram indicates an expected call of RunProgram.
func (mr *MockInterfaceMockRecorder) RunProgram(program any) *MockInterfaceRunProgramCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunProgram", reflect.TypeOf((*MockInterface)(nil).RunProgram), program)
	return &MockInterfaceRunProgramCall{Call: call}
}

// MockInterfaceRunProgramCall wrap *gomock.Call
type MockInterfaceRunProgramCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceRunProgramCall) Return(arg0 tea.Model, arg1 error) *MockInterfaceRunProgramCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceRunProgramCall) Do(f func(*tea.Program) (tea.Model, error)) *MockInterfaceRunProgramCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceRunProgramCall) DoAndReturn(f func(*tea.Program) (tea.Model, error)) *MockInterfaceRunProgramCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
