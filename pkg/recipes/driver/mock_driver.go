// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/recipes/driver (interfaces: Driver)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_driver.go -package=driver -self_package github.com/radius-project/radius/pkg/recipes/driver github.com/radius-project/radius/pkg/recipes/driver Driver
//

// Package driver is a generated GoMock package.
package driver

import (
	context "context"
	reflect "reflect"

	recipes "github.com/radius-project/radius/pkg/recipes"
	gomock "go.uber.org/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
	isgomock struct{}
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDriver) Delete(ctx context.Context, opts DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDriverMockRecorder) Delete(ctx, opts any) *MockDriverDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDriver)(nil).Delete), ctx, opts)
	return &MockDriverDeleteCall{Call: call}
}

// MockDriverDeleteCall wrap *gomock.Call
type MockDriverDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDriverDeleteCall) Return(arg0 error) *MockDriverDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDriverDeleteCall) Do(f func(context.Context, DeleteOptions) error) *MockDriverDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDriverDeleteCall) DoAndReturn(f func(context.Context, DeleteOptions) error) *MockDriverDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Execute mocks base method.
func (m *MockDriver) Execute(ctx context.Context, opts ExecuteOptions) (*recipes.RecipeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, opts)
	ret0, _ := ret[0].(*recipes.RecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockDriverMockRecorder) Execute(ctx, opts any) *MockDriverExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDriver)(nil).Execute), ctx, opts)
	return &MockDriverExecuteCall{Call: call}
}

// MockDriverExecuteCall wrap *gomock.Call
type MockDriverExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDriverExecuteCall) Return(arg0 *recipes.RecipeOutput, arg1 error) *MockDriverExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDriverExecuteCall) Do(f func(context.Context, ExecuteOptions) (*recipes.RecipeOutput, error)) *MockDriverExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDriverExecuteCall) DoAndReturn(f func(context.Context, ExecuteOptions) (*recipes.RecipeOutput, error)) *MockDriverExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRecipeMetadata mocks base method.
func (m *MockDriver) GetRecipeMetadata(ctx context.Context, opts BaseOptions) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipeMetadata", ctx, opts)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipeMetadata indicates an expected call of GetRecipeMetadata.
func (mr *MockDriverMockRecorder) GetRecipeMetadata(ctx, opts any) *MockDriverGetRecipeMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipeMetadata", reflect.TypeOf((*MockDriver)(nil).GetRecipeMetadata), ctx, opts)
	return &MockDriverGetRecipeMetadataCall{Call: call}
}

// MockDriverGetRecipeMetadataCall wrap *gomock.Call
type MockDriverGetRecipeMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDriverGetRecipeMetadataCall) Return(arg0 map[string]any, arg1 error) *MockDriverGetRecipeMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDriverGetRecipeMetadataCall) Do(f func(context.Context, BaseOptions) (map[string]any, error)) *MockDriverGetRecipeMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDriverGetRecipeMetadataCall) DoAndReturn(f func(context.Context, BaseOptions) (map[string]any, error)) *MockDriverGetRecipeMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
