// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/recipes/driver (interfaces: DriverWithSecrets)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_driver_with_secrets.go -package=driver -self_package github.com/radius-project/radius/pkg/recipes/driver github.com/radius-project/radius/pkg/recipes/driver DriverWithSecrets
//

// Package driver is a generated GoMock package.
package driver

import (
	context "context"
	reflect "reflect"

	recipes "github.com/radius-project/radius/pkg/recipes"
	gomock "go.uber.org/mock/gomock"
)

// MockDriverWithSecrets is a mock of DriverWithSecrets interface.
type MockDriverWithSecrets struct {
	ctrl     *gomock.Controller
	recorder *MockDriverWithSecretsMockRecorder
	isgomock struct{}
}

// MockDriverWithSecretsMockRecorder is the mock recorder for MockDriverWithSecrets.
type MockDriverWithSecretsMockRecorder struct {
	mock *MockDriverWithSecrets
}

// NewMockDriverWithSecrets creates a new mock instance.
func NewMockDriverWithSecrets(ctrl *gomock.Controller) *MockDriverWithSecrets {
	mock := &MockDriverWithSecrets{ctrl: ctrl}
	mock.recorder = &MockDriverWithSecretsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverWithSecrets) EXPECT() *MockDriverWithSecretsMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDriverWithSecrets) Delete(ctx context.Context, opts DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDriverWithSecretsMockRecorder) Delete(ctx, opts any) *MockDriverWithSecretsDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDriverWithSecrets)(nil).Delete), ctx, opts)
	return &MockDriverWithSecretsDeleteCall{Call: call}
}

// MockDriverWithSecretsDeleteCall wrap *gomock.Call
type MockDriverWithSecretsDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDriverWithSecretsDeleteCall) Return(arg0 error) *MockDriverWithSecretsDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDriverWithSecretsDeleteCall) Do(f func(context.Context, DeleteOptions) error) *MockDriverWithSecretsDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDriverWithSecretsDeleteCall) DoAndReturn(f func(context.Context, DeleteOptions) error) *MockDriverWithSecretsDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Execute mocks base method.
func (m *MockDriverWithSecrets) Execute(ctx context.Context, opts ExecuteOptions) (*recipes.RecipeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, opts)
	ret0, _ := ret[0].(*recipes.RecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockDriverWithSecretsMockRecorder) Execute(ctx, opts any) *MockDriverWithSecretsExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDriverWithSecrets)(nil).Execute), ctx, opts)
	return &MockDriverWithSecretsExecuteCall{Call: call}
}

// MockDriverWithSecretsExecuteCall wrap *gomock.Call
type MockDriverWithSecretsExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDriverWithSecretsExecuteCall) Return(arg0 *recipes.RecipeOutput, arg1 error) *MockDriverWithSecretsExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDriverWithSecretsExecuteCall) Do(f func(context.Context, ExecuteOptions) (*recipes.RecipeOutput, error)) *MockDriverWithSecretsExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDriverWithSecretsExecuteCall) DoAndReturn(f func(context.Context, ExecuteOptions) (*recipes.RecipeOutput, error)) *MockDriverWithSecretsExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindSecretIDs mocks base method.
func (m *MockDriverWithSecrets) FindSecretIDs(ctx context.Context, config recipes.Configuration, definition recipes.EnvironmentDefinition) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSecretIDs", ctx, config, definition)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSecretIDs indicates an expected call of FindSecretIDs.
func (mr *MockDriverWithSecretsMockRecorder) FindSecretIDs(ctx, config, definition any) *MockDriverWithSecretsFindSecretIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSecretIDs", reflect.TypeOf((*MockDriverWithSecrets)(nil).FindSecretIDs), ctx, config, definition)
	return &MockDriverWithSecretsFindSecretIDsCall{Call: call}
}

// MockDriverWithSecretsFindSecretIDsCall wrap *gomock.Call
type MockDriverWithSecretsFindSecretIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDriverWithSecretsFindSecretIDsCall) Return(secretIDs map[string][]string, err error) *MockDriverWithSecretsFindSecretIDsCall {
	c.Call = c.Call.Return(secretIDs, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDriverWithSecretsFindSecretIDsCall) Do(f func(context.Context, recipes.Configuration, recipes.EnvironmentDefinition) (map[string][]string, error)) *MockDriverWithSecretsFindSecretIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDriverWithSecretsFindSecretIDsCall) DoAndReturn(f func(context.Context, recipes.Configuration, recipes.EnvironmentDefinition) (map[string][]string, error)) *MockDriverWithSecretsFindSecretIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRecipeMetadata mocks base method.
func (m *MockDriverWithSecrets) GetRecipeMetadata(ctx context.Context, opts BaseOptions) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipeMetadata", ctx, opts)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipeMetadata indicates an expected call of GetRecipeMetadata.
func (mr *MockDriverWithSecretsMockRecorder) GetRecipeMetadata(ctx, opts any) *MockDriverWithSecretsGetRecipeMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipeMetadata", reflect.TypeOf((*MockDriverWithSecrets)(nil).GetRecipeMetadata), ctx, opts)
	return &MockDriverWithSecretsGetRecipeMetadataCall{Call: call}
}

// MockDriverWithSecretsGetRecipeMetadataCall wrap *gomock.Call
type MockDriverWithSecretsGetRecipeMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDriverWithSecretsGetRecipeMetadataCall) Return(arg0 map[string]any, arg1 error) *MockDriverWithSecretsGetRecipeMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDriverWithSecretsGetRecipeMetadataCall) Do(f func(context.Context, BaseOptions) (map[string]any, error)) *MockDriverWithSecretsGetRecipeMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDriverWithSecretsGetRecipeMetadataCall) DoAndReturn(f func(context.Context, BaseOptions) (map[string]any, error)) *MockDriverWithSecretsGetRecipeMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
