// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/recipes/terraform/config/backends (interfaces: Backend)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_backend.go -package=backends -self_package github.com/radius-project/radius/pkg/recipes/terraform/config/backends github.com/radius-project/radius/pkg/recipes/terraform/config/backends Backend
//

// Package backends is a generated GoMock package.
package backends

import (
	context "context"
	reflect "reflect"

	recipes "github.com/radius-project/radius/pkg/recipes"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
	isgomock struct{}
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// BuildBackend mocks base method.
func (m *MockBackend) BuildBackend(resourceRecipe *recipes.ResourceMetadata) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildBackend", resourceRecipe)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildBackend indicates an expected call of BuildBackend.
func (mr *MockBackendMockRecorder) BuildBackend(resourceRecipe any) *MockBackendBuildBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildBackend", reflect.TypeOf((*MockBackend)(nil).BuildBackend), resourceRecipe)
	return &MockBackendBuildBackendCall{Call: call}
}

// MockBackendBuildBackendCall wrap *gomock.Call
type MockBackendBuildBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendBuildBackendCall) Return(arg0 map[string]any, arg1 error) *MockBackendBuildBackendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendBuildBackendCall) Do(f func(*recipes.ResourceMetadata) (map[string]any, error)) *MockBackendBuildBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendBuildBackendCall) DoAndReturn(f func(*recipes.ResourceMetadata) (map[string]any, error)) *MockBackendBuildBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateBackendExists mocks base method.
func (m *MockBackend) ValidateBackendExists(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBackendExists", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateBackendExists indicates an expected call of ValidateBackendExists.
func (mr *MockBackendMockRecorder) ValidateBackendExists(ctx, name any) *MockBackendValidateBackendExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBackendExists", reflect.TypeOf((*MockBackend)(nil).ValidateBackendExists), ctx, name)
	return &MockBackendValidateBackendExistsCall{Call: call}
}

// MockBackendValidateBackendExistsCall wrap *gomock.Call
type MockBackendValidateBackendExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendValidateBackendExistsCall) Return(arg0 bool, arg1 error) *MockBackendValidateBackendExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendValidateBackendExistsCall) Do(f func(context.Context, string) (bool, error)) *MockBackendValidateBackendExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendValidateBackendExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockBackendValidateBackendExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
