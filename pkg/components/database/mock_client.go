// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/components/database (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_client.go -package=database -self_package github.com/radius-project/radius/pkg/components/database github.com/radius-project/radius/pkg/components/database Client
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockClient) Delete(ctx context.Context, id string, options ...DeleteOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(ctx, id any, options ...any) *MockClientDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), varargs...)
	return &MockClientDeleteCall{Call: call}
}

// MockClientDeleteCall wrap *gomock.Call
type MockClientDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientDeleteCall) Return(arg0 error) *MockClientDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientDeleteCall) Do(f func(context.Context, string, ...DeleteOptions) error) *MockClientDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientDeleteCall) DoAndReturn(f func(context.Context, string, ...DeleteOptions) error) *MockClientDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockClient) Get(ctx context.Context, id string, options ...GetOptions) (*Object, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(ctx, id any, options ...any) *MockClientGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), varargs...)
	return &MockClientGetCall{Call: call}
}

// MockClientGetCall wrap *gomock.Call
type MockClientGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetCall) Return(arg0 *Object, arg1 error) *MockClientGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetCall) Do(f func(context.Context, string, ...GetOptions) (*Object, error)) *MockClientGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetCall) DoAndReturn(f func(context.Context, string, ...GetOptions) (*Object, error)) *MockClientGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Query mocks base method.
func (m *MockClient) Query(ctx context.Context, query Query, options ...QueryOptions) (*ObjectQueryResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*ObjectQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockClientMockRecorder) Query(ctx, query any, options ...any) *MockClientQueryCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockClient)(nil).Query), varargs...)
	return &MockClientQueryCall{Call: call}
}

// MockClientQueryCall wrap *gomock.Call
type MockClientQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientQueryCall) Return(arg0 *ObjectQueryResult, arg1 error) *MockClientQueryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientQueryCall) Do(f func(context.Context, Query, ...QueryOptions) (*ObjectQueryResult, error)) *MockClientQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientQueryCall) DoAndReturn(f func(context.Context, Query, ...QueryOptions) (*ObjectQueryResult, error)) *MockClientQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockClient) Save(ctx context.Context, obj *Object, options ...SaveOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockClientMockRecorder) Save(ctx, obj any, options ...any) *MockClientSaveCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockClient)(nil).Save), varargs...)
	return &MockClientSaveCall{Call: call}
}

// MockClientSaveCall wrap *gomock.Call
type MockClientSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientSaveCall) Return(arg0 error) *MockClientSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientSaveCall) Do(f func(context.Context, *Object, ...SaveOptions) error) *MockClientSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientSaveCall) DoAndReturn(f func(context.Context, *Object, ...SaveOptions) error) *MockClientSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
