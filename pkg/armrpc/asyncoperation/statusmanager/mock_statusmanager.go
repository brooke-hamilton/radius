// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/armrpc/asyncoperation/statusmanager (interfaces: StatusManager)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_statusmanager.go -package=statusmanager -self_package github.com/radius-project/radius/pkg/armrpc/asyncoperation/statusmanager github.com/radius-project/radius/pkg/armrpc/asyncoperation/statusmanager StatusManager
//

// Package statusmanager is a generated GoMock package.
package statusmanager

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	v1 "github.com/radius-project/radius/pkg/armrpc/api/v1"
	resources "github.com/radius-project/radius/pkg/ucp/resources"
	gomock "go.uber.org/mock/gomock"
)

// MockStatusManager is a mock of StatusManager interface.
type MockStatusManager struct {
	ctrl     *gomock.Controller
	recorder *MockStatusManagerMockRecorder
	isgomock struct{}
}

// MockStatusManagerMockRecorder is the mock recorder for MockStatusManager.
type MockStatusManagerMockRecorder struct {
	mock *MockStatusManager
}

// NewMockStatusManager creates a new mock instance.
func NewMockStatusManager(ctrl *gomock.Controller) *MockStatusManager {
	mock := &MockStatusManager{ctrl: ctrl}
	mock.recorder = &MockStatusManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusManager) EXPECT() *MockStatusManagerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStatusManager) Delete(ctx context.Context, id resources.ID, operationID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, operationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStatusManagerMockRecorder) Delete(ctx, id, operationID any) *MockStatusManagerDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStatusManager)(nil).Delete), ctx, id, operationID)
	return &MockStatusManagerDeleteCall{Call: call}
}

// MockStatusManagerDeleteCall wrap *gomock.Call
type MockStatusManagerDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusManagerDeleteCall) Return(arg0 error) *MockStatusManagerDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusManagerDeleteCall) Do(f func(context.Context, resources.ID, uuid.UUID) error) *MockStatusManagerDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusManagerDeleteCall) DoAndReturn(f func(context.Context, resources.ID, uuid.UUID) error) *MockStatusManagerDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockStatusManager) Get(ctx context.Context, id resources.ID, operationID uuid.UUID) (*Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, operationID)
	ret0, _ := ret[0].(*Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStatusManagerMockRecorder) Get(ctx, id, operationID any) *MockStatusManagerGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStatusManager)(nil).Get), ctx, id, operationID)
	return &MockStatusManagerGetCall{Call: call}
}

// MockStatusManagerGetCall wrap *gomock.Call
type MockStatusManagerGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusManagerGetCall) Return(arg0 *Status, arg1 error) *MockStatusManagerGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusManagerGetCall) Do(f func(context.Context, resources.ID, uuid.UUID) (*Status, error)) *MockStatusManagerGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusManagerGetCall) DoAndReturn(f func(context.Context, resources.ID, uuid.UUID) (*Status, error)) *MockStatusManagerGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueueAsyncOperation mocks base method.
func (m *MockStatusManager) QueueAsyncOperation(ctx context.Context, sCtx *v1.ARMRequestContext, options QueueOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueAsyncOperation", ctx, sCtx, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueAsyncOperation indicates an expected call of QueueAsyncOperation.
func (mr *MockStatusManagerMockRecorder) QueueAsyncOperation(ctx, sCtx, options any) *MockStatusManagerQueueAsyncOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueAsyncOperation", reflect.TypeOf((*MockStatusManager)(nil).QueueAsyncOperation), ctx, sCtx, options)
	return &MockStatusManagerQueueAsyncOperationCall{Call: call}
}

// MockStatusManagerQueueAsyncOperationCall wrap *gomock.Call
type MockStatusManagerQueueAsyncOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusManagerQueueAsyncOperationCall) Return(arg0 error) *MockStatusManagerQueueAsyncOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusManagerQueueAsyncOperationCall) Do(f func(context.Context, *v1.ARMRequestContext, QueueOperationOptions) error) *MockStatusManagerQueueAsyncOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusManagerQueueAsyncOperationCall) DoAndReturn(f func(context.Context, *v1.ARMRequestContext, QueueOperationOptions) error) *MockStatusManagerQueueAsyncOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockStatusManager) Update(ctx context.Context, id resources.ID, operationID uuid.UUID, state v1.ProvisioningState, endTime *time.Time, opError *v1.ErrorDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, operationID, state, endTime, opError)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStatusManagerMockRecorder) Update(ctx, id, operationID, state, endTime, opError any) *MockStatusManagerUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStatusManager)(nil).Update), ctx, id, operationID, state, endTime, opError)
	return &MockStatusManagerUpdateCall{Call: call}
}

// MockStatusManagerUpdateCall wrap *gomock.Call
type MockStatusManagerUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusManagerUpdateCall) Return(arg0 error) *MockStatusManagerUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusManagerUpdateCall) Do(f func(context.Context, resources.ID, uuid.UUID, v1.ProvisioningState, *time.Time, *v1.ErrorDetails) error) *MockStatusManagerUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusManagerUpdateCall) DoAndReturn(f func(context.Context, resources.ID, uuid.UUID, v1.ProvisioningState, *time.Time, *v1.ErrorDetails) error) *MockStatusManagerUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
